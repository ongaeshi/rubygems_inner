*[ruby][gem] RubyGemsはrequireの裏で何をやっているのか？
[f:id:tuto0621:20111213005815p:image]
ライブラリやツールをコマンド一発でインストール出来るRubyGemsはとっても便利です。自作ソフトを[https://rubygems.org/:title=RubyGems.org]に登録すれば世界中でインストールして使ってもらえます。便利なRubyGemsですが内部ではどのような仕組みで動いているのでしょうか？

** インストールしたgemはどこへいくのか？
試しに適当なgemをインストールしてみましょう。
>||
$ gem install rubywho
Successfully installed rubywho-0.4.0
1 gem installed
Installing ri documentation for rubywho-0.4.0...
Installing RDoc documentation for rubywho-0.4.0...
||<

OSXのMacPorts経由でインストールした場合は、以下にインストールされます。
<span class="deco" style="font-style:italic;">/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/</span>

古いバージョンもインストールしてみます。

>||
$ gem install rubywho -v 0.3.0
Fetching: rubywho-0.3.0.gem (100%)
Successfully installed rubywho-0.3.0
1 gem installed
Installing ri documentation for rubywho-0.3.0...
Installing RDoc documentation for rubywho-0.3.0...
||<

gemは複数のバージョンを同時に管理することが出来ます。rubywho-0.3.0は0.4.0の横に置かれます。

- <span class="deco" style="font-style:italic;">/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/</span>
- <span class="deco" style="font-style:italic;">/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.3.0/</span>

rubywho-0.4.0/の下には、作者が書いたコードがテストを含めた状態で入っています。[https://github.com/ongaeshi/rubywho:title=ongaeshi/rubywho - GitHub]は完全なrubywhoのソースコード一式ですが、gemの中身とほとんど変わりません。

gemをフォルダごと適当な場所にコピーすればテストも実行出来ますし改造することも可能です(unix環境ではパーミッションを直す必要があるかもしれません)。

>||
$ cp -rpv /opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/ ~/tmp/rubywho
/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/ -> /Users/ongaeshi/tmp/rubywho
/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0//.document -> /Users/ongaeshi/tmp/rubywho/.document
.
.
$ cd ~/tmp/rubywho/
$ rake test
(in /Users/ongaeshi/tmp/rubywho)
/opt/local/bin/ruby -I"lib:lib:test" "/opt/local/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader.rb" "test/test_rubywho.rb" 
Loaded suite /opt/local/lib/ruby/gems/1.8/gems/rake-0.8.7/lib/rake/rake_test_loader
Started
......
Finished in 0.016145 seconds.

6 tests, 48 assertions, 0 failures, 0 errors
||<

何かRubyで作りたいものがある時は、似たようなことを実現しているgemを見つけ、そのソースコードを読むとかなり役立ちます。

** $LOAD_PATHって何者？
まずは以下のプログラムを実行してみましょう。

>|ruby|
# requireやloadはLOAD_PATHに登録されているディレクトリの中を順番に探して最初に見つかったものを採用する
p $LOAD_PATH                    #=> ["/opt/local/lib/ruby/site_ruby/1.8", ...]
# p $:                            # $LOAD_PATHの省略形

# ファイルが見つからない場合は、LoadError例外
begin
  require 'test_script'
rescue LoadError
  puts "'test_script' not found."
end

# LOAD_PATHに適切なディレクトリを設定すると読み込めるようになる
$LOAD_PATH.unshift "test"
require 'test_script'
puts test_script()

# LOAD_PATHに含まれたディレクトリからの相対パスでもOK
require 'a/test_script2'
puts a_test_script()
||<

実行結果
>||
$ ruby ./load_path_test.rb
["/opt/local/lib/ruby/site_ruby/1.8", "/opt/local/lib/ruby/site_ruby/1.8/i686-darwin10", "/opt/local/lib/ruby/site_ruby", "/opt/local/lib/ruby/vendor_ruby/1.8", "/opt/local/lib/ruby/vendor_ruby/1.8/i686-darwin10", "/opt/local/lib/ruby/vendor_ruby", "/opt/local/lib/ruby/1.8", "/opt/local/lib/ruby/1.8/i686-darwin10", "."]
'test_script' not found.
test_script!!
a/test_script!!
||<

Rubyのライブラリ読み込みの仕組みはとても単純です。

+ <span class="deco" style="font-weight:bold;">$LOAD_PATH</span>(<span class="deco" style="font-weight:bold;">$:</span>)を順に辿る
+ 目的のファイルが見つかったら終了
+ 最後まで来たら<span class="deco" style="font-weight:bold;">LoadError</span>例外

C言語やC++に慣れている人は、gccのインクルードパス(-Iオプション)と同じようなもの、と言うと分かりやすいかもしれません。

Rubyでは<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>を実行時に変更することが可能なため、C言語と比べて柔軟な動作をすることが出来ます。

** require 'rubygems'すると、$LOAD_PATHにどのような変化があるか？
以下のプログラムを実行してみましょう。
>|ruby|
# gemをrequireするとLOAD_PATHが変化する
# require 'rubywho' すると、 gems/rubywho-0.4.0/bin や gems/rubywho-0.4.0 が追加される
require 'rubygems'
require 'rubywho'
p $LOAD_PATH                    #=> ["/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/bin", "/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/lib", ...]
||<

実行結果
>||
$ ruby ./require_gem_test.rb
["/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/bin", "/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/lib", "/opt/local/lib/ruby/site_ruby/1.8", "/opt/local/lib/ruby/site_ruby/1.8/i686-darwin10", "/opt/local/lib/ruby/site_ruby", "/opt/local/lib/ruby/vendor_ruby/1.8", "/opt/local/lib/ruby/vendor_ruby/1.8/i686-darwin10", "/opt/local/lib/ruby/vendor_ruby", "/opt/local/lib/ruby/1.8", "/opt/local/lib/ruby/1.8/i686-darwin10", "."]
||<

- <span class="deco" style="font-style:italic;">/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/bin</span>
- <span class="deco" style="font-style:italic;">/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/lib</span>

の2つが<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>の先頭に追加されています。この状態で

>||
require 'rubywho'
||<

すると

+ Rubyは<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>を先頭から辿る
+ <span class="deco" style="font-style:italic;">/opt/local/lib/ruby/gems/1.8/gems/rubywho-0.4.0/lib/rubywho.rb</span> が最初に見つかって読み込まれる。

つまりRubyGemsの仕事は「登録されているライブラリパスの中から適切なものを探してそれを<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>に追加する」ということのようです。

** コードリーディング、rubygems/lib/rubygems/custom_require.rb
RubyGemsでは <span class="deco" style="font-weight:bold;">Kernel#require</span> を独自のものに置き換えることで上記の仕事をしているようです。

<span class="deco" style="font-style:italic;">rubygems/lib/rubygems/custom_require.rb</span> (コメントは日本語に訳してあります)
>|ruby|
require 'rubygems'

module Kernel
  ##
  # RubyGemsがロードされる前のKernel#require

  alias gem_original_require require

  ##
  # RubyGemsがrequireされた時、Kernel#requireは、必要な時にgemを読み込む独自の実装に置き換えられます。
  #
  # <tt>require 'x'</tt> した時、以下のことが起きる:
  # * もし現在の$LOAD_PATHからファイルが読み込める時は読み込む
  # * 見つからなければ、インストールされたgemsからマッチするファイルがあるか探す。
  #   もし 'y' gem から見つかれば、そのgemをアクティベートする ($LOAD_PATHに追加する)
  #
  # 通常<tt>require</tt>の'ファイルがすでにロード済みの時にfalseを返す機能'は維持している。
  #
  def require(path) # :doc:
    gem_original_require path
  rescue LoadError => load_error
    if load_error.message =~ /#{Regexp.escape path}\z/ and
       spec = Gem.searcher.find(path) then
      Gem.activate(spec.name, "= #{spec.version}")
      gem_original_require path
    else
      raise load_error
    end
  end

  private :require
  private :gem_original_require

end
||<

+ <span class="deco" style="font-weight:bold;">gem_original_require</span> で元々の require を呼べるようにする
+ 最初に<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>を探して見つかればそのまま読み込む
+ 見つからなければインストールされたgemsからマッチするファイルがあるか探して、見つかればアクティベートして<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>に追加する
+ <span class="deco" style="font-weight:bold;">gem_original_require</span> して読み込み完了

はじめに<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>から探すのが肝です。
あるgemから2つ以上のファイルをrequireする場合、2回目以降は<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>から読み込まれることになります(アクティベートされるのは最初の一回目だけです)。
通常requireの「ファイルがすでにロード済みの時にfalseを返す」機能も維持出来る、シンプルで素晴らしい実装ですね。

** gem本体を書き換えずに特定のアプリ上でのみ挙動を変更するには？ 
自分のアプリケーションが特定のgemを利用している時、一部の挙動に問題があることがあります。もちろんgemに対してパッチを送るのがベストですが、そのパッチが棄却されたり取り込まれたバージョンがなかなかリリースされないこともあるはずです。そんな時はどのように対処すればいいのでしょうか？gem本体を書き換えずに特定のアプリ上でのみ挙動の一部を書き換えることは可能なのでしょうか？

もちろん<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>を利用すれば可能です！！

半年程前、[http://milkode.ongaeshi.me/wiki:title=Milkode]というアプリケーションを作っていた時に[https://rubygems.org/gems/archive-zip:title=archive-zip]というgemをzipファイルの展開に使うことにしました。gem自体は使いやすくて問題もなかったのですが、当時最新だった0.3ではRuby1.9で動かなかったことが問題でした(最新の0.4.0では修正済みです)。パッチを送ったもののすでに他のアプローチをとっていたため取り込まれず、Ruby1.9で動くバージョンが出るのも少し後になりそうでした。

そこで「1.9で動くパッチをmilkode内部でだけ当ててarchive-zipが対応したらそのパッチを外す」というアプローチをとることにしました。

まずは問題となったコードです。 
[https://github.com/javanthropus/archive-zip/blob/ea0ec513f2b2837810ee4c60d917e527c9b4427a/lib/archive/support/io.rb:title=lib/archive/support/io.rb at GitHub]
>|ruby|
require 'readbytes'

class IO
  # Returns +true+ if the seek method of this IO instance would succeed, +false+
  # otherwise.
  def seekable?
    begin
      pos
      true
    rescue SystemCallError
      false
    end
  end
end
||<

>|ruby|
require 'archive/support/io' 
||<
というパスでrequireされます。

細かい説明は省略しますが'readbytes'というライブラリがRuby1.9では無くなっているのが原因でした。色々と考えた結果、<span class="deco" style="font-style:italic;">archive/support/io.rb</span> が以下のようになればRuby1.8, 1.9 の両方で動くことが分かりました。

>|ruby|
# -*- coding: utf-8 -*-
#
# @file
# @brief archive-zip/lib/archive/support/io.rb patch, removed in the future.
# @author ongaeshi
# @date 2011/08/04

begin
  require 'readbytes'
rescue LoadError
  # for Ruby 1.9.2
  class TruncatedDataError<IOError
    def initialize(mesg, data) # :nodoc:
      @data = data
      super(mesg)
    end

    # The read portion of an IO#readbytes attempt.
    attr_reader :data
  end
  
  class IO
    # Reads exactly +n+ bytes.
    #
    # If the data read is nil an EOFError is raised.
    #
    # If the data read is too short a TruncatedDataError is raised and the read
    # data is obtainable via its #data method.
    def readbytes(n)
      str = read(n)
      if str == nil
        raise EOFError, "End of file reached"
      end
      if str.size < n
        raise TruncatedDataError.new("data truncated", str)
      end
      str
    end
  end
end
  
class IO
  # Returns +true+ if the seek method of this IO instance would succeed, +false+
  # otherwise.
  def seekable?
    begin
      pos
      true
    rescue SystemCallError
      false
    end
  end
end
||<

ここからはmilkode本体を書き換えていきます。

+ <span class="deco" style="font-style:italic;">milkode/vendor/archive/support/io.rb</span> を追加します。
-- [https://github.com/ongaeshi/milkode/blob/archive-zip-patch/vendor/archive/support/io.rb:title=vendor/archive/support/io.rb at GitHub]
+ <span class="deco" style="font-style:italic;">milkode/lib/milkode/common/archive-zip.rb</span> というファイルを作ります。
-- [https://github.com/ongaeshi/milkode/blob/archive-zip-patch/lib/milkode/common/archive-zip.rb:title=lib/milkode/common/archive-zip.rb at GitHub]
+ <span class="deco" style="font-weight:bold;">require 'archive/zip'</span> している箇所を <span class="deco" style="font-weight:bold;">require 'milkode/common/archive-zip'</span> に置き換えます。
-- [https://github.com/ongaeshi/milkode/commit/0e72a913428905e9d13e017f1b9258f8031e40e8#diff-1:title=Commit 0e72a913428905e9d13e017f1b9258f8031e40e8 at GitHub]

これで準備は終わりです！！ 
<span class="deco" style="font-style:italic;">lib/common/archive-zip.rb</span>
>|ruby|
# -*- coding: utf-8 -*-
#
# @file
# @brief archive-zipがRuby1.9.2に対応するまでのパッチ
# @author ongaeshi
# @date 2011/08/04

$LOAD_PATH.unshift File.join(File.dirname(__FILE__), '../../../vendor')
require 'archive/zip'
||<
<span class="deco" style="font-weight:bold;">File.join(File.dirname(__FILE__), 'path/to/dir')</span> はスクリプト位置からの相対パスを絶対パスに変換するための定型文です。
<span class="deco" style="font-style:italic;">milkode/lib/milkode/common/../../../vendor</span>なので、結果として<span class="deco" style="font-style:italic;">milkode/vendor</span>に変換されます。
<span class="deco" style="font-style:italic;">milkode/vendor</span>が<span class="deco" style="font-weight:bold;">$LOAD_PATH</span>の先頭に挿入されるため、

+ <span class="deco" style="font-style:italic;">milkode/vendor</span> 以下にファイルが存在する場合は優先して読み込み
+ 見つからなかった場合は通常の読み込み処理へ

となります(先ほどのRubyGemsの読み込みルールを思い出して下さい)。

今回の場合 <span class="deco" style="font-style:italic;">milkode/vendor/archive/support/io.rb</span> があるので、

>|ruby|
require 'archive/support/io'
||<

の時、<span class="deco" style="font-style:italic;">vendor/</span>以下のファイルが通常のgemコードよりも優先して読み込まれます。まさに期待通りの動作です！！

gem本体のバージョンが上がりパッチを当てる必要がなくなったら<span class="deco" style="font-weight:bold;">$LOAD_PATH.unshift</span>の部分をコメントアウトしましょう。
[https://github.com/ongaeshi/milkode/commit/c727625e7ba114b72d5ae5b0290e610ae6bb5fd1#diff-1:title=Commit c727625e7ba114b72d5ae5b0290e610ae6bb5fd1 to ongaeshi/milkode - GitHub]
>|ruby|
# 0.4.0になったため、必要なくなった。
# $LOAD_PATH.unshift File.join(File.dirname(__FILE__), '../../../vendor')
require 'archive/zip'
||<

** Ruby Advent Calendar jp: 2011
この記事はRuby Advent Calendar jp: 2011の14日目の記事でした！！

よかったらこちらもどうぞ、もっと面白い記事がたくさんあります。
- [http://atnd.org/events/22021:title=Ruby Advent Calendar jp: 2011 : ATND]

** 参考文献
- 今回書いたソースコード等 [https://github.com/ongaeshi/rubygems_inner:title=ongaeshi/rubygems_inner - GitHub]
- Rubyリファレンスマニュアル、[http://doc.ruby-lang.org/ja/1.9.2/class/Kernel.html:title=module Kernel] の''$LOAD_PATH''の項目
- [http://blog.livedoor.jp/sasata299/archives/51299559.html:title=require 'rubygems' したときの挙動 - (ﾟ∀ﾟ)o彡 sasata299's blog]
